{"version":3,"sources":["assets/Common/UI/UIView.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;;AAEtF,yCAAwC;AACxC,mCAAkC;AAElC;;;;;;;;;;;;;;;;GAgBG;AAEG,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAE5C,aAAa;AACb,IAAY,WAIX;AAJD,WAAY,WAAW;IACnB,6DAAY,CAAA;IACZ,yDAAU,CAAA;IACV,qDAAQ,CAAA;AACZ,CAAC,EAJW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAItB;AAAA,CAAC;AAGF;IAA4B,0BAAY;IAAxC;QAAA,qEAwEC;QAtEG,WAAW;QAEX,gBAAU,GAAY,KAAK,CAAC;QAC5B,0BAA0B;QAC1B,YAAY;QACZ,gCAAgC;QAChC,WAAW;QAEX,WAAK,GAAY,KAAK,CAAC;QACvB,aAAa;QAEb,cAAQ,GAAgB,WAAW,CAAC,QAAQ,CAAC;QAC7C,WAAW;QACJ,UAAI,GAAW,CAAC,CAAC;;IAyD5B,CAAC;IAnDG,sBAAI,0BAAM;aAAV;YACI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;gBACtB,IAAI,CAAC,OAAO,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxC;YACD,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IAED,sDAAsD;IACtD;;;OAGG;IACI,qBAAI,GAAX;QAAY,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;IAEnB,CAAC;IAED;;;;OAIG;IACI,uBAAM,GAAb,UAAc,MAAc;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;IAErC,CAAC;IAED;;OAEG;IACI,8BAAa,GAApB;IACA,CAAC;IAED;;;OAGG;IACI,wBAAO,GAAd;IAEA,CAAC;IAED;;;;OAIG;IACI,sBAAK,GAAZ,UAAa,KAAa;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;IAEnC,CAAC;IAEM,4BAAW,GAAlB;QACI,qBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAvDD,0BAA0B;IACX,cAAO,GAAW,CAAC,CAAC;IAbnC;QADC,QAAQ;8CACmB;IAM5B;QADC,QAAQ;yCACc;IAGvB;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;4CACI;IAbpC,MAAM;QADlB,OAAO;OACK,MAAM,CAwElB;IAAD,aAAC;CAxED,AAwEC,CAxE2B,EAAE,CAAC,SAAS,GAwEvC;AAxEY,wBAAM","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport { uiManager } from \"./UIManager\";\nimport { UINode } from \"./UINode\";\n\n/**\n * UIView界面基础类\n * \n * 1. 快速关闭与屏蔽点击的选项配置\n * 2. 界面缓存设置（开启后界面关闭不会被释放，以便下次快速打开）\n * 3. 界面显示类型配置\n * \n * 4. 加载资源接口（随界面释放自动释放），this.loadRes(xxx)\n * 5. 由UIManager释放\n * \n * 5. 界面初始化回调（只调用一次）\n * 6. 界面打开回调（每次打开回调）\n * 7. 界面打开动画播放结束回调（动画播放完回调）\n * 8. 界面关闭回调\n * 9. 界面置顶回调\n * \n */\n\nconst { ccclass, property } = cc._decorator;\n\n/** 界面展示类型 */\nexport enum UIShowTypes {\n    UIFullScreen,       // 全屏显示，全屏界面使用该选项可获得更高性能\n    UIAddition,         // 叠加显示，性能较差\n    UISingle,           // 单界面显示，只显示当前界面和背景界面，性能较好\n};\n\n@ccclass\nexport class UIView extends cc.Component {\n\n    /** 快速关闭 */\n    @property\n    quickClose: boolean = false;\n    /** 屏蔽点击选项 在UIConf设置屏蔽点击*/\n    // @property\n    // preventTouch: boolean = true;\n    /** 缓存选项 */\n    @property\n    cache: boolean = false;\n    /** 界面显示类型 */\n    @property({ type: cc.Enum(UIShowTypes) })\n    showType: UIShowTypes = UIShowTypes.UISingle;\n    /** 界面id */\n    public uiId: number = 0;\n    /**  静态变量，用于区分相同界面的不同实例 */\n    private static uiIndex: number = 0;\n\n    private _uiNode: UINode;\n\n    get uiNode(): UINode {\n        if (this._uiNode == null) {\n            this._uiNode = new UINode(this.node);\n        }\n        return this._uiNode;\n    }\n\n    /********************** UI的回调 ***********************/\n    /**\n     * 当界面被创建时回调，生命周期内只调用\n     * @param args 可变参数\n     */\n    public init(...args): void {\n\n    }\n\n    /**\n     * 当界面被打开时回调，每次调用Open时回调\n     * @param fromUI 从哪个UI打开的\n     * @param args 可变参数\n     */\n    public onOpen(fromUI: number, ...args): void {\n\n    }\n\n    /**\n     * 每次界面Open动画播放完毕时回调\n     */\n    public onOpenAniOver(): void {\n    }\n\n    /**\n     * 当界面被关闭时回调，每次调用Close时回调\n     * 返回值会传递给下一个界面\n     */\n    public onClose(): any {\n\n    }\n\n    /**\n     * 当界面被置顶时回调，Open时并不会回调该函数\n     * @param preID 前一个ui\n     * @param args 可变参数，\n     */\n    public onTop(preID: number, ...args): void {\n\n    }\n\n    public onBtn_close() {\n        uiManager.close(this);\n    }\n}\n"]}