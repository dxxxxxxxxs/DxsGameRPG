{"version":3,"sources":["assets/Scripts/Framework/Audio/AudioManager.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtF,yDAAoD;AAG9C,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAUI;QAEQ,gBAAW,GAAQ,CAAC,CAAC;QACrB,gBAAW,GAAQ,CAAC,CAAC;IAHP,CAAC;qBAVd,YAAY;IAErB,sBAAkB,wBAAQ;aAA1B;YAEI,IAAG,IAAI,CAAC,SAAS,IAAE,IAAI,EACvB;gBACI,IAAI,CAAC,SAAS,GAAC,IAAI,cAAY,EAAE,CAAC;aACrC;YACD,OAAO,IAAI,CAAC,SAAyB,CAAC;QAC1C,CAAC;;;OAAA;IAKD;;;OAGG;IACH,2BAAI,GAAJ,UAAK,WAA0B;QAE3B,cAAY,CAAC,WAAW,GAAC,WAAW,CAAC;IACzC,CAAC;IACD;;;;OAIG;IACG,gCAAS,GAAf,UAAgB,IAAW,EAAC,MAAc;QAAd,uBAAA,EAAA,gBAAc;;;;;;wBAEhC,WAAW,GAAC,cAAY,CAAC,WAAY,CAAC;wBACnC,qBAAM,uBAAa,CAAC,IAAI,CAAC,IAAI,EAAC,MAAM,CAAC,EAAA;;wBAA1C,IAAI,GAAC,SAAqC;wBAC9C,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,IAAoB,EAAE,KAAK,CAAC,CAAC;;;;;KACzD;IACD,gCAAS,GAAT;IAEA,CAAC;;IAnCQ,YAAY;QADxB,OAAO;OACK,YAAY,CAoCxB;IAAD,mBAAC;CApCD,AAoCC,IAAA;AApCY,oCAAY","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport BundleManager from \"../Bundle/BundleManager\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport class AudioManager {\n    private static _instance:AudioManager;\n    public static get Instance()\n    {\n        if(this._instance==null)\n        {\n            this._instance=new AudioManager();\n        }\n        return this._instance as AudioManager;\n    }\n    private constructor(){}\n    private static audioSource?:cc.AudioSource\n    private soundVolume:number=1;\n    private musicVolume:number=1;\n    /**\n     * 初始化音乐组件（全局一般只有一个音乐节点，只会初始化一次）\n     * @param audioSource 音乐节点身上的AudioSource组件\n     */\n    init(audioSource:cc.AudioSource)\n    {\n        AudioManager.audioSource=audioSource;\n    }\n    /**\n     * 播放音乐（一般是背景音乐）\n     * @param name 要播放的音乐名字\n     * @param bundle 如果没错应该是AssetBundle的分包加载的名称，比如game，hall什么的\n     */\n    async playMusic(name:string,bundle=\"Audio\")\n    {\n        const audioSource=AudioManager.audioSource!;\n        let clip=await BundleManager.load(name,bundle);\n        cc.audioEngine.playMusic(clip as cc.AudioClip, false);\n    }\n    playSound()\n    {\n    }\n}\n"]}