{"version":3,"sources":["assets/Scripts/Framework/Pool/ObjectPool.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;AAEtF,yDAAoD;AAEpD,qCAAgC;AAE1B,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAUI;QACI,IAAI,CAAC,KAAK,GAAC,IAAI,GAAG,EAAkB,CAAC;IACzC,CAAC;mBAZgB,UAAU;IAE3B,sBAAkB,sBAAQ;aAA1B;YAEI,IAAG,IAAI,CAAC,SAAS,IAAE,IAAI,EACvB;gBACI,IAAI,CAAC,SAAS,GAAC,IAAI,YAAU,EAAE,CAAC;aACnC;YACD,OAAO,IAAI,CAAC,SAAuB,CAAC;QACxC,CAAC;;;OAAA;IAOD;;OAEG;IACI,0BAAK,GAAZ,UAAa,IAAW,EAAC,MAAc;QAEnC,IAAI,IAAI,GAAS,IAAI,CAAC;QACtB,IAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EACxB;YACI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAC,MAAM,CAAC,CAAC;SACjC;QACD,IAAI,GAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IACD;;;;OAIG;IACH,gCAAW,GAAX,UAAY,IAAW,EAAC,MAAc;QAAtC,iBAcC;QAZG,uBAAa,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,EAAC,UAAC,GAAS,EAAC,IAAc;YACzE,IAAG,GAAG,EACN;gBACI,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO;aACV;iBAED;gBACI,IAAI,IAAI,GAAC,IAAI,iBAAO,CAAC,IAAI,EAAC,MAAM,CAAC,CAAC;gBAClC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,CAAC,CAAC;aACtC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;;IAjDgB,UAAU;QAD9B,OAAO;OACa,UAAU,CAkD9B;IAAD,iBAAC;CAlDD,AAkDC,IAAA;kBAlDoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport BundleManager from \"../Bundle/BundleManager\";\nimport IResultAble from \"./IResultAble\";\nimport SubPool from \"./SubPool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ObjectPool {\n    private static _instance:ObjectPool;\n    public static get Instance()\n    {\n        if(this._instance==null)\n        {\n            this._instance=new ObjectPool();\n        }\n        return this._instance as ObjectPool;\n    }\n    private constructor(){\n        this.pools=new Map<string,SubPool>();\n    }\n    //对象池\n    private pools:Map<string,SubPool>;\n\n    /**\n     * 取出指定节点\n     */\n    public Spawn(name:string,parent:cc.Node):cc.Node\n    {\n        let pool:SubPool=null;\n        if(!this.pools.has(name))\n        {\n            this.RegisterNew(name,parent);\n        }\n        pool=this.pools.get(name);\n        console.log(pool.poolName);\n        return pool.Spawn();\n    }\n    /**\n     * 新建一个对象池\n     * @param name 对象池名字\n     * @param parent 对象池所在位置\n     */\n    RegisterNew(name:string,parent:cc.Node)\n    {\n        BundleManager.bundleMap.get(\"ObjectPool\").load(name,(err:Error,node:cc.Prefab)=>{\n            if(err)\n            {\n                console.error(err);\n                return;\n            }\n            else\n            {\n                let pool=new SubPool(node,parent);\n                this.pools.set(pool.poolName,pool);\n            }\n        });\n    }\n}\n"]}