{"version":3,"sources":["assets/Common/Tools/CCTools.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;AAEhF,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAqC,2BAAY;IAAjD;;IAoCA,CAAC;IAnCiB,oBAAY,GAA1B,UAA2B,KAAa;QACpC,cAAc;QACd,IAAM,UAAU,GAAG,4BAA4B,CAAC;QAEhD,iBAAiB;QACjB,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACW,eAAO,GAArB,UAAsB,MAAe,EAAE,IAAa,EAAE,IAAwC;QAAxC,qBAAA,EAAA,OAAgB,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE;QAC1F,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,8BAAY,GAAZ,UAAa,KAAa;QACtB,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,kBAAkB;QACtD,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW;QAC9C,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QAC3C,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QAC7C,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjD,IAAM,cAAc,GAAM,SAAS,YAAO,QAAQ,SAAI,UAAU,YAAO,SAAW,CAAC,CAAC,cAAc;QAClG,OAAO,cAAc,CAAC;IAC1B,CAAC;IAnCgB,OAAO;QAD3B,OAAO;OACa,OAAO,CAoC3B;IAAD,cAAC;CApCD,AAoCC,CApCoC,EAAE,CAAC,SAAS,GAoChD;kBApCoB,OAAO","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CCTools extends cc.Component {\n    public static isValidEmail(email: string): boolean {\n        // 邮箱地址的正则表达式 \n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n        // 使用正则表达式验证输入字符串\n        return emailRegex.test(email);\n    }\n\n    /**\n     * 添加一个节点\n     * @param parent 父节点 \n     * @param name 节点名称\n     * @param size 节点大小\n     */\n    public static addNode(parent: cc.Node, name?: string, size: cc.Size = cc.view.getVisibleSize()): cc.Node {\n        let node = new cc.Node(name);\n        node.setContentSize(size);\n        parent.addChild(node);\n        return node;\n    }\n\n    /**\n     * 将传入的邮箱地址变为（首字符+****+尾字符+@+首字符+****+尾字符）\n     * @param email 需要隐藏的邮箱地址\n     * @returns \n     */\n    convertEmail(email: string): string {\n        const atIndex = email.indexOf('@'); // 获取邮箱中 @ 符号的索引位置\n        const firstChar = email.charAt(0); // 获取邮箱的首字符\n        const lastChar = email.charAt(atIndex - 1);\n        const firstChar2 = email.charAt(atIndex + 1);\n        const lastChar2 = email.charAt(email.length - 1);\n        const convertedEmail = `${firstChar}****${lastChar}@${firstChar2}****${lastChar2}`; // 拼接转换后的邮箱字符串\n        return convertedEmail;\n    }\n}\n"]}