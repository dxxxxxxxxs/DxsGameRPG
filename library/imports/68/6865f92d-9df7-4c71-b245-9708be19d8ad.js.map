{"version":3,"sources":["assets/Scripts/Framework/Pool/ObjectPool.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtF,yDAAoD;AAEpD,qCAAgC;AAE1B,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAUI;QACI,IAAI,CAAC,KAAK,GAAC,IAAI,GAAG,EAAkB,CAAC;IACzC,CAAC;mBAZgB,UAAU;IAE3B,sBAAkB,sBAAQ;aAA1B;YAEI,IAAG,IAAI,CAAC,SAAS,IAAE,IAAI,EACvB;gBACI,IAAI,CAAC,SAAS,GAAC,IAAI,YAAU,EAAE,CAAC;aACnC;YACD,OAAO,IAAI,CAAC,SAAuB,CAAC;QACxC,CAAC;;;OAAA;IAOD;;;;;OAKG;IACU,0BAAK,GAAlB,UAAmB,IAAW,EAAC,MAAc;uCAAE,OAAO;;;gBAElD,sBAAO,IAAI,OAAO,CAAU,UAAO,QAAQ;;;;;oCACnC,IAAI,GAAS,IAAI,CAAC;yCACnB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAArB,wBAAqB;oCAEpB,qBAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAC,MAAM,CAAC,EAAA;;oCAAnC,SAAmC,CAAC;;;oCAExC,IAAI,GAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oCAC1B,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;;;yBAC1B,CAAC,EAAA;;;KACL;IACD;;;OAGG;IACI,4BAAO,GAAd,UAAe,IAAY;QAEvB,IAAI,IAAI,GAAS,IAAI,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAC,GAAG;YACzB,IAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EACvB;gBACI,IAAI,GAAC,KAAK,CAAC;gBACX,OAAO;aACV;QACL,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IACD;;OAEG;IACI,+BAAU,GAAjB;QAEI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAC,GAAG;YACzB,KAAK,CAAC,UAAU,EAAE,CAAC;QACvB,CAAC,CAAC,CAAA;IACN,CAAC;IACD;;OAEG;IACI,0BAAK,GAAZ;QAEI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IACD;;;;OAIG;IACG,gCAAW,GAAjB,UAAkB,IAAW,EAAC,MAAc;;;;;4BAE/B,qBAAM,uBAAa,CAAC,IAAI,CAAY,IAAI,EAAC,YAAY,CAAC,EAAA;;wBAA3D,IAAI,GAAC,SAAsD;wBAC3D,IAAI,GAAC,IAAI,iBAAO,CAAC,IAAI,EAAC,MAAM,CAAC,CAAC;wBAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,CAAC,CAAC;;;;;KACtC;;IA5EgB,UAAU;QAD9B,OAAO;OACa,UAAU,CA6E9B;IAAD,iBAAC;CA7ED,AA6EC,IAAA;kBA7EoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport BundleManager from \"../Bundle/BundleManager\";\nimport IResultAble from \"./IResultAble\";\nimport SubPool from \"./SubPool\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ObjectPool {\n    private static _instance:ObjectPool;\n    public static get Instance()\n    {\n        if(this._instance==null)\n        {\n            this._instance=new ObjectPool();\n        }\n        return this._instance as ObjectPool;\n    }\n    private constructor(){\n        this.pools=new Map<string,SubPool>();\n    }\n    //对象池\n    private pools:Map<string,SubPool>;\n\n    /**\n     * 取出指定节点\n     * @param name 节点预制体名字\n     * @param parent 节点创建出来后的父节点\n     * @returns 一个异步的cc.node对象，需要用await接收\n     */\n    public async Spawn(name:string,parent:cc.Node):Promise<cc.Node>\n    {\n        return new Promise<cc.Node>(async (resovlve)=>{\n            let pool:SubPool=null;\n            if(!this.pools.has(name))\n            {\n                await this.RegisterNew(name,parent);\n            }\n            pool=this.pools.get(name);\n            resovlve(pool.Spawn());\n        })\n    }\n    /**\n     * 回收指定节点\n     * @param node 要回收的节点\n     */\n    public UnSpawn(node:cc.Node)\n    {\n        let pool:SubPool=null;\n        this.pools.forEach((value,key)=>{\n            if(value.Contains(node))\n            {\n                pool=value;\n                return;\n            }\n        })\n        pool.UnSpawn(node);\n    }\n    /**\n     * 回收所有节点\n     */\n    public UnSpawnAll()\n    {\n        this.pools.forEach((value,key)=>{\n            value.UnSpawnAll();\n        })\n    }\n    /**\n     *  清除所有对象池\n     */\n    public Clear()\n    {\n        this.pools.clear();\n    }\n    /**\n     * 新建一个对象池\n     * @param name 对象池名字\n     * @param parent 对象池中所有对象的父节点\n     */\n    async RegisterNew(name:string,parent:cc.Node)\n    {\n        let node=await BundleManager.load<cc.Prefab>(name,\"ObjectPool\");\n        let pool=new SubPool(node,parent);\n        this.pools.set(pool.poolName,pool);\n    }\n}\n"]}