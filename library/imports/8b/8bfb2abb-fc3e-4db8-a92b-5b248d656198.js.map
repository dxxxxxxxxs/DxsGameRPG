{"version":3,"sources":["assets/Common/Pool/ObjectPool.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtF,yDAAoD;AAEpD,qCAAgC;AAE1B,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAQI;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAmB,CAAC;IAC5C,CAAC;mBAVgB,UAAU;IAE3B,sBAAkB,sBAAQ;aAA1B;YACI,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;gBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,YAAU,EAAE,CAAC;aACrC;YACD,OAAO,IAAI,CAAC,SAAuB,CAAC;QACxC,CAAC;;;OAAA;IAOD;;;;;OAKG;IACU,0BAAK,GAAlB,UAAmB,IAAY,EAAE,MAAe;uCAAG,OAAO;;;gBACtD,sBAAO,IAAI,OAAO,CAAU,UAAO,QAAQ;;;;;oCACnC,IAAI,GAAY,IAAI,CAAC;yCACrB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAArB,wBAAqB;oCACrB,qBAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,EAAA;;oCAApC,SAAoC,CAAC;;;oCAIzC,SAAS;oCACT,yBAAyB;oCACzB,gBAAgB;oCAChB,IAAI;oCACJ,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oCAC5B,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;;;yBAC1B,CAAC,EAAA;;;KACL;IACD;;;OAGG;IACI,4BAAO,GAAd,UAAe,IAAa;QACxB,IAAI,IAAI,GAAY,IAAI,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;YAC1B,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACtB,IAAI,GAAG,KAAK,CAAC;gBACb,OAAO;aACV;QACL,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IACD;;OAEG;IACI,+BAAU,GAAjB;QACI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;YAC1B,KAAK,CAAC,UAAU,EAAE,CAAC;QACvB,CAAC,CAAC,CAAA;IACN,CAAC;IACD;;OAEG;IACI,0BAAK,GAAZ;QACI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IACD;;;;OAIG;IACG,gCAAW,GAAjB,UAAkB,IAAY,EAAE,MAAe;;;;;4BAChC,qBAAM,uBAAa,CAAC,IAAI,CAAY,IAAI,EAAE,YAAY,CAAC,EAAA;;wBAA9D,IAAI,GAAG,SAAuD;wBAC9D,IAAI,GAAG,IAAI,iBAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;wBACrC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;;;;KACvC;;IAzEgB,UAAU;QAD9B,OAAO;OACa,UAAU,CA0E9B;IAAD,iBAAC;CA1ED,AA0EC,IAAA;kBA1EoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport BundleManager from \"../Bundle/BundleManager\";\nimport IResultAble from \"./IResultAble\";\nimport SubPool from \"./SubPool\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ObjectPool {\n    private static _instance: ObjectPool;\n    public static get Instance() {\n        if (this._instance == null) {\n            this._instance = new ObjectPool();\n        }\n        return this._instance as ObjectPool;\n    }\n    private constructor() {\n        this.pools = new Map<string, SubPool>();\n    }\n    //对象池\n    private pools: Map<string, SubPool>;\n\n    /**\n     * 取出指定节点\n     * @param name 节点预制体名字\n     * @param parent 节点创建出来后的父节点\n     * @returns 一个异步的cc.node对象，需要用await接收\n     */\n    public async Spawn(name: string, parent: cc.Node): Promise<cc.Node> {\n        return new Promise<cc.Node>(async (resovlve) => {\n            let pool: SubPool = null;\n            if (!this.pools.has(name)) {\n                await this.RegisterNew(name, parent);\n                // pool = this.pools.get(name);\n                // resovlve(pool.Spawn());\n            }\n            // else {\n            //     setTimeout(() => {\n            //     }, 0.01);\n            // }\n            pool = this.pools.get(name);\n            resovlve(pool.Spawn());\n        })\n    }\n    /**\n     * 回收指定节点\n     * @param node 要回收的节点\n     */\n    public UnSpawn(node: cc.Node) {\n        let pool: SubPool = null;\n        this.pools.forEach((value, key) => {\n            if (value.Contains(node)) {\n                pool = value;\n                return;\n            }\n        })\n        pool.UnSpawn(node);\n    }\n    /**\n     * 回收所有节点\n     */\n    public UnSpawnAll() {\n        this.pools.forEach((value, key) => {\n            value.UnSpawnAll();\n        })\n    }\n    /**\n     *  清除所有对象池\n     */\n    public Clear() {\n        this.pools.clear();\n    }\n    /**\n     * 新建一个对象池\n     * @param name 对象池名字\n     * @param parent 对象池中所有对象的父节点\n     */\n    async RegisterNew(name: string, parent: cc.Node) {\n        let node = await BundleManager.load<cc.Prefab>(name, \"ObjectPool\");\n        let pool = new SubPool(node, parent);\n        this.pools.set(pool.poolName, pool);\n    }\n}\n"]}